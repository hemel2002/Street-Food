<!DOCTYPE html >
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Street Food Bangladesh</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/7.3.2/mdb.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/6.2.0/mdb.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/7.3.2/mdb.umd.min.js"></script>
    <link href="../../css/viewShop.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <style>
        /* Setting the size and position of the background image */
        .bg-image {
            background-size: cover;
            background-position: 50% 50%;
            height: 500px;
            max-height: 300px;
        }

        /* Adjusting the background attachment based on screen size */
        .mask {
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            height: 100%;
            overflow: hidden;
            background-attachment: fixed;
        }

        @media (max-width: 767.98px) {
            .mask {
                background-attachment: scroll;
            }
        }

        /* Setting image styles within the cards */
        .card img {
            width: 100%;
            height: auto;
            max-height: 300px;
            object-fit: cover;
        }

        /* Styling for custom card layout */
        .card-custom {
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            height: 100%;
        }

        /* Card body styling */
        .card-body {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: flex-start;
            padding: 1.5rem;
        }

        /* Card title styling */
        .card-title {
            margin-top: 1rem;
            font-size: 1.25rem;
        }

        /* Card text styling */
        .card-text {
            margin-top: 1rem;
            margin-bottom: 1rem;
            flex-grow: 1;
        }

        /* Primary button styling */
        .btn-primary {
            align-self: center;
            margin-top: auto;
        }

        /* Styling for the custom card with hover effect */
        .cardS {
            position: relative;
            width: 400px;
            height: 350px;
            background: linear-gradient(-45deg, #f89b29 0%, #ff0f7b 100%);
            background-image: url('https://res.cloudinary.com/da7hqzvvf/image/upload/v1718991078/food/hmwomqdouvt3uhjooe0p.jpg');
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            transition: all 0.6s cubic-bezier(0.23, 1, 0.32, 1);
            padding-top: 8px;
            margin-top: 20px;
            background-repeat: no-repeat;
            background-size: cover;
            background-position: center;
        }

        /* Adjusting SVG size and fill within the card */
        .cardS svg {
            width: 48px;
            fill: #333;
            transition: all 0.6s cubic-bezier(0.23, 1, 0.32, 1);
        }

        /* Hover effect for the card */
        .cardS:hover {
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        }

        /* Content styling within the card */
        .cardS__content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) rotate(-45deg);
            width: 100%;
            height: 100%;
            padding: 20px;
            box-sizing: border-box;
            background-color: #fff;
            opacity: 0;
            transition: all 0.6s cubic-bezier(0.23, 1, 0.32, 1);
        }

        /* Hover effect to reveal card content */
        .cardS:hover .cardS__content {
            transform: translate(-50%, -50%) rotate(0deg);
            opacity: 1;
        }

        /* Styling for the card title */
        .cardS__title {
            margin: 0;
            font-size: 24px;
            color: #333;
            font-weight: 700;
        }

        /* Description styling within the card */
        .cardS__description {
            margin: 10px 0 0;
            font-size: 14px;
            color: #777;
            line-height: 1.4;
        }

        /* Scale and rotation effect on hover for SVG */
        .cardS:hover svg {
            scale: 0;
            transform: rotate(-45deg);
        }

        /* Styling for card footer buttons */
        .card-footer button {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .dark-theme-text {
            color: #000000;
            /* Change this to the desired text color for dark theme */
        }
        .thumbnail-container {
            position: relative;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
        }

        .video-thumbnail {
            width: 100%;
            height: auto;
            border-radius: 5px;
        }

        .play-button-overlay {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 3rem;
            opacity: 0.8;
            pointer-events: none;
        }

        .video-frame-container {
            margin-top: 15px;
        }
    </style>
</head>

<body>
    <section draggable="false" class="overflow-hidden pt-0">
        <section class="mb-10">
            <div class="p-5 text-center bg-image" style="background-image: url('<%= viewshop[0].STALL_PIC %>')"
                aria-controls="#picker-editor" alt="Background Image"></div>
            <div class="container">
                <div class="card mx-4 mx-md-5 text-center shadow-5-strong"
                    style="margin-top: -170px; background: hsla(0, 0%, 100%, 0.7); backdrop-filter: blur(30px);">
                    <div class="card-body px-4 py-5 px-md-5">
                        <h1 class="display-3 fw-bold ls-tight mb-4 text-danger">
                            <span> <%= viewshop[0].STALL_TITLE.split(' ').slice(0, -3).join(' ') %> </span>
                          
                            <br />
                            <span class="text-primary">  <%= viewshop[0].STALL_TITLE.split(' ').slice(-3).join(' ') %> </span>
                          
                        </h1>
                        <a id="shop-details-btn" class="btn btn-primary btn-lg py-3 px-5 mb-2 mb-md-0 me-md-2"
                            role="button" aria-controls="#picker-editor" draggable="false" style="min-width: auto">
                            Shop details <i class="fas fa-cart-arrow-down p-1 ps-2"></i>
                        </a>
                    </div>
                </div>
            </div>
        </section>
    </section>

    <section draggable="false" class="container pt-5">
        <section class="mb-10 text-center text-lg-start">
            <h2 class="fw-bold mb-5 text-center">Available Foods</h2>
            <div class="row gx-lg-3" id="food-cards">
                <!-- Food cards will be injected here by JavaScript -->
            </div>
        </section>
        <div class="pagination-center">
            <button id="prev-btn" class="btn btn-primary">Previous</button>
            <div id="page-numbers"></div>
            <button id="next-btn" class="btn btn-primary">Next</button>
        </div>
    </section>
    <section draggable="false" class="container pt-5">
        <section class="mb-10">
            <div class="row d-flex justify-content-center">
                <div class="col-md-10 col-xl-8 text-center">
                    <h3 class="fw-bold mb-4">What clients say</h3>
                </div>
            </div>
            <div class="row text-center d-flex align-items-stretch" id="testimonial-cards">
                <!-- Testimonial cards will be injected here by JavaScript -->
            </div>
        </section>
        <div class="pagination-center">
            <button id="testimonial-prev-btn" class="btn btn-primary">Previous</button>
            <div id="testimonial-page-numbers"></div>
            <button id="testimonial-next-btn" class="btn btn-primary">Next</button>
        </div>
    </section>
    

    <!-- Videos Section -->
    <section draggable="false" class="container pt-5">
        <section class="mb-10">
            <div class="row gx-lg-5" id="video-cards">
                <!-- Video cards will be inserted here by JavaScript -->
            </div>
            <div class="pagination-center">
                <button id="video-prev-btn" class="btn btn-primary">Previous</button>
                <div id="video-page-numbers"></div>
                <button id="video-next-btn" class="btn btn-primary">Next</button>
            </div>
        </section>
    </section>
    <!-- Modal Structure -->
    <div class="modal fade" id="videoModal" tabindex="-1" aria-labelledby="videoModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="videoModalLabel">Video Player</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="ratio ratio-16x9">
                        <iframe id="modalVideoPlayer" src="" frameborder="0" allowfullscreen></iframe>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let foodData = [];
        let videoData = [];
        let testimonialData = [];
        let userId = '<%= id %>'; // Ensure id is defined and accessible
    
        const getdata = async () => {
            const urlParams = new URLSearchParams(window.location.search);
            const sellerId = urlParams.get('id');
            document.getElementById('shop-details-btn').href = `/home/shopDetails?id=${sellerId}`;
            try {
                const res = await axios.get(`/home/ViewShop?id=${sellerId}&responseType=json`);
                foodData = res.data.viewshop;
                videoData = res.data.video;
                testimonialData = res.data.review;
                console.log('foodData', foodData);
                console.log('videoData', videoData);
                console.log('testimonialData', testimonialData);
    
                initializeFoodPagination();
                initializeVideoPagination();
                initializeTestimonialsPagination();
            } catch (error) {
                console.log('error', error);
            }
        };
    
        getdata();
    
        function initializeTestimonialsPagination() {
            const itemsPerPage = 3;
            let currentPage = 1;
            const totalPages = Math.ceil(testimonialData.length / itemsPerPage);
            const testimonialCardsContainer = document.getElementById('testimonial-cards');
            const prevBtn = document.getElementById('testimonial-prev-btn');
            const nextBtn = document.getElementById('testimonial-next-btn');
            const pageNumbers = document.getElementById('testimonial-page-numbers');
    
            function renderTestimonialItems() {
                testimonialCardsContainer.innerHTML = '';
                const start = (currentPage - 1) * itemsPerPage;
                const end = start + itemsPerPage;
                const itemsToRender = testimonialData.slice(start, end);
    
    
                if (itemsToRender.length === 0) {
                    testimonialCardsContainer.innerHTML = '<p>No reviews available.</p>';
                    return;
                }
    
                itemsToRender.forEach((item) => {
                    const testimonialCard = document.createElement('div');
                    testimonialCard.classList.add('col-lg-4', 'col-md-12', 'mb-4', 'mb-lg-0');
                    testimonialCard.innerHTML = `
                        <div class="card testimonial-card">
                            <div class="card-body">
                                <h5 class="card-title">${item.C_NAME || 'Anonymous'}</h5>
                                <p class="card-text">"${item.REVIEW_MESSAGE || 'No message provided'}"</p>
                                <div class="rating text-warning">
                                    ${generateStars(item.RATING || 0)}
                                </div>
                            </div>
                        </div>
                    `;
                    testimonialCardsContainer.appendChild(testimonialCard);
                });
            }
    
            function generateStars(rating) {
                let stars = '';
                for (let i = 1; i <= 5; i++) {
                    stars += i <= rating ? '<i class="fas fa-star"></i>' : '<i class="far fa-star"></i>';
                }
                return stars;
            }
    
            function updatePagination() {
                prevBtn.disabled = currentPage === 1;
                nextBtn.disabled = currentPage === totalPages;
    
                pageNumbers.innerHTML = '';
                for (let i = 1; i <= totalPages; i++) {
                    const pageNumberBtn = document.createElement('button');
                    pageNumberBtn.classList.add('page-btn', 'btn', 'btn-sm', 'mx-1');
                    pageNumberBtn.innerText = i;
    
                    if (i === currentPage) {
                        pageNumberBtn.classList.add('active');
                    }
    
                    pageNumberBtn.addEventListener('click', () => {
                        currentPage = i;
                        renderTestimonialItems();
                        updatePagination();
                    });
    
                    pageNumbers.appendChild(pageNumberBtn);
                }
            }
    
            prevBtn.addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    renderTestimonialItems();
                    updatePagination();
                }
            });
    
            nextBtn.addEventListener('click', () => {
                if (currentPage < totalPages) {
                    currentPage++;
                    renderTestimonialItems();
                    updatePagination();
                }
            });
    
            renderTestimonialItems();
            updatePagination();
        }
    
        function initializeFoodPagination() {
            const itemsPerPage = 6;
            let currentPage = 1;
            const totalPages = Math.ceil(foodData.length / itemsPerPage);
            const foodCardsContainer = document.getElementById('food-cards');
            const prevBtn = document.getElementById('prev-btn');
            const nextBtn = document.getElementById('next-btn');
            const pageNumbers = document.getElementById('page-numbers');
    
            function renderFoodItems() {
                foodCardsContainer.innerHTML = '';
                const start = (currentPage - 1) * itemsPerPage;
                const end = start + itemsPerPage;
                const itemsToRender = foodData.slice(start, end);
    
                const renderedImages = new Set();
    
                itemsToRender.forEach((item) => {
                    if (!renderedImages.has(item.FOOD_PIC)) {
                        const foodCard = document.createElement('div');
                        foodCard.classList.add('col-lg-4', 'col-md-12', 'mb-4', 'mb-lg-0');
                        foodCard.innerHTML = `
                            <div class="cardS" style="background-image: url('${item.FOOD_PIC}');">
                                <div class="cardS__content card">
                                    <p class="cardS__title">${item.FOOD_NAME}</p>
                                    <div class="ingredient-container text-danger">
                                        <p class="card-text ingredient-text">${item.INGREDIENT}</p>
                                    </div>
                                    <p class="card-text text-danger">Price: ${item.PRICE} Tk</p>
                                    <div class="rating text-danger">
                                        ${generateStars(item.RATING)}
                                    </div>
                                    <button class="btn btn-success btn-md ingredient-button"
                                        style="float: right;"
                                        onclick="window.location.href='/user/details_food?FOOD_ID=${item.FOOD_ID}'">
                                        Details
                                    </button>
                                </div>
                            </div>
                        `;
                        foodCardsContainer.appendChild(foodCard);
                        renderedImages.add(item.FOOD_PIC);
                    }
                });
            }
    
            function generateStars(rating) {
                let stars = '';
                for (let i = 1; i <= 5; i++) {
                    stars += i <= rating ? '<i class="fas fa-star"></i>' : '<i class="far fa-star"></i>';
                }
                return stars;
            }
    
            function renderPageNumbers() {
                pageNumbers.innerHTML = '';
                for (let i = 1; i <= totalPages; i++) {
                    const pageNumber = document.createElement('button');
                    pageNumber.classList.add('btn', 'btn-light', 'btn-md', 'me-2');
                    pageNumber.textContent = i;
                    pageNumber.addEventListener('click', () => {
                        currentPage = i;
                        renderFoodItems();
                        renderPageNumbers();
                        updateButtons();
                    });
                    if (i === currentPage) {
                        pageNumber.classList.add('active');
                    }
                    pageNumbers.appendChild(pageNumber);
                }
            }
    
            function updateButtons() {
                prevBtn.disabled = currentPage === 1;
                nextBtn.disabled = currentPage === totalPages;
            }
    
            prevBtn.addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    renderFoodItems();
                    renderPageNumbers();
                    updateButtons();
                }
            });
    
            nextBtn.addEventListener('click', () => {
                if (currentPage < totalPages) {
                    currentPage++;
                    renderFoodItems();
                    renderPageNumbers();
                    updateButtons();
                }
            });
    
            renderFoodItems();
            renderPageNumbers();
            updateButtons();
        }
    
        function initializeVideoPagination() {
            const itemsPerPage = 3;
            let currentPage = 1;
            const totalPages = Math.ceil(videoData.length / itemsPerPage);
            const videoCardsContainer = document.getElementById('video-cards');
            const prevBtn = document.getElementById('video-prev-btn');
            const nextBtn = document.getElementById('video-next-btn');
            const pageNumbers = document.getElementById('video-page-numbers');
    
            function renderVideoItems() {
                videoCardsContainer.innerHTML = '';
                const start = (currentPage - 1) * itemsPerPage;
                const end = start + itemsPerPage;
                const itemsToRender = videoData.slice(start, end);
    
                itemsToRender.forEach((item) => {
    const videoCard = document.createElement('div');
    videoCard.classList.add('col-lg-4', 'col-md-12', 'mb-4', 'mb-lg-0');
    
    // Video card structure with thumbnail
    videoCard.innerHTML = `
        <div class="card testimonial-card">
            <div class="card-body">
                <!-- Thumbnail with play button -->
                <div class="thumbnail-container">
                    <img src="${item.IMAGE_LINKS}" alt="${item.VIDEO_TITLE}" class="img-fluid video-thumbnail" />
                    <div class="play-button-overlay">
                        <i class="fas fa-play-circle"></i>
                    </div>
                </div>
                
                <h5 class="card-title mt-3">${item.VIDEO_TITLE}</h5>
                <p class="card-text">${item.VIDEO_DESCRIPTION}</p>
            </div>
        </div>
    `;
    
    // Append the created video card to the container
    videoCardsContainer.appendChild(videoCard);

    // Add click event to open the modal and play the video
    const thumbnail = videoCard.querySelector('.thumbnail-container');
    
    thumbnail.addEventListener('click', () => {
        // Set the video link dynamically in the modal's iframe
        const modalVideoPlayer = document.getElementById('modalVideoPlayer');
        modalVideoPlayer.src = `${item.VIDEO_LINKS}?autoplay=1`;
        
        // Show the modal
        const videoModal = new bootstrap.Modal(document.getElementById('videoModal'));
        videoModal.show();
        
        // Clear the video when modal is closed
        videoModal._element.addEventListener('hidden.bs.modal', () => {
            modalVideoPlayer.src = '';
        });
    });
});
            }
    
            function renderPageNumbers() {
                pageNumbers.innerHTML = '';
                for (let i = 1; i <= totalPages; i++) {
                    const pageNumber = document.createElement('button');
                    pageNumber.classList.add('btn', 'btn-light', 'btn-md', 'me-2');
                    pageNumber.textContent = i;
                    pageNumber.addEventListener('click', () => {
                        currentPage = i;
                        renderVideoItems();
                        renderPageNumbers();
                        updateButtons();
                    });
                    if (i === currentPage) {
                        pageNumber.classList.add('active');
                    }
                    pageNumbers.appendChild(pageNumber);
                }
            }
    
            function updateButtons() {
                prevBtn.disabled = currentPage === 1;
                nextBtn.disabled = currentPage === totalPages;
            }
    
            prevBtn.addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    renderVideoItems();
                    renderPageNumbers();
                    updateButtons();
                }
            });
    
            nextBtn.addEventListener('click', () => {
                if (currentPage < totalPages) {
                    currentPage++;
                    renderVideoItems();
                    renderPageNumbers();
                    updateButtons();
                }
            });
    
            renderVideoItems();
            renderPageNumbers();
            updateButtons();
        }
    </script>
    
    
</body>

</html>